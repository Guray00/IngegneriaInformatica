******************************************
* sistema/sistema.cpp
******************************************

// ( SOLUZIONE 2024-01-29
	if (p->barrier_id == 0xFFFFFFFF)
		return;


	barrier_t *b = &barriers[p->barrier_id];
	p->barrier_id = 0xFFFFFFFF;

	while (b->waiting) {
		des_proc *work = rimozione_lista(b->waiting);
		work->contesto[I_RAX] = false;
		// il processo corrente verrÃ  inserito in lista
		// pronti dal driver del timer, quindi dobbiamo
		// stare attendi a non inserirlo due volte
		if (work != p)
			inserimento_lista(pronti, work);
	}
	if (b->narrived == b->nproc) {
		b->first = nullptr;
		b->narrived = 0;
	} else {
		b->bad = true;
	}
//   SOLUZIONE 2024-01-29 )
// ( SOLUZIONE 2024-01-29
	if (id >= barrier_nextid) {
		flog(LOG_WARN, "id non valido: %d", id);
		c_abort_p();
		return;
	}

	barrier_t *b = &barriers[id];

	b->narrived++;

	if (b->bad) {
		esecuzione->contesto[I_RAX] = false;
		if (b->narrived == b->nproc) {
			b->bad = false;
			b->narrived = 0;
		}
		return;
	}

	if (!b->first) {
		b->first = esecuzione;
		esecuzione->barrier_id = id;
		richiesta* p = new richiesta;
		p->d_attesa = b->timeout;
		p->pp = esecuzione;
		inserimento_lista_attesa(p);
	}

	inserimento_lista(b->waiting, esecuzione);
	if (b->narrived == b->nproc) {
		rimozione_lista_attesa(b->first);
		b->first->barrier_id = 0xFFFFFFFF;
		b->first = nullptr;
		while (b->waiting) {
			des_proc *work = rimozione_lista(b->waiting);
			work->contesto[I_RAX] = true;
			inserimento_lista(pronti, work);
		}
		b->narrived = 0;
	}
	schedulatore();
//   SOLUZIONE 2024-01-29 )


